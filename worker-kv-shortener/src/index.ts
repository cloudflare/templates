import { logger } from 'hono/logger';
import { Hono } from 'hono';
import { cors } from 'hono/cors';

export interface Env {
	SHORTENER_KV: KVNamespace;
	HOST_URL: string;
}

const app = new Hono();

app.use('*', logger(), cors());

app.post('/', async c => {
	const json = await c.req.json<any>();
	const longLink = json?.url;
	// generate a random slug or use existing slug
	let slug = json?.slug || Math.random().toString(36).slice(-7);
	let existing = await c.env.SHORTENER_KV.get(slug);
	// case where slug was autogenerated, want to generate another slug just in case
	while (existing && json?.slug === undefined) {
		slug = Math.random().toString(36).slice(-7);
		existing = await c.env.SHORTENER_KV.get(slug);
	}
	// generate shortened URL and return to user
	await c.env.SHORTENER_KV.put(slug, longLink);
	return c.json({ url: `${c.env.HOST_URL}/${slug}` });
});

app.get('/:slug', async c => {
	const slug = c.req.param('slug');
	const redirectTo = await c.env.SHORTENER_KV.get(slug);
	if (redirectTo) {
		return c.redirect(redirectTo, 302);
	}
	return c.json({ error: 'URL not found' }, 404);
});

export default app;
